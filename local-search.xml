<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>ET-BERT 文章翻译</title>
    <link href="/2023/10/25/ET-BERT/"/>
    <url>/2023/10/25/ET-BERT/</url>
    
    <content type="html"><![CDATA[<h1 id="ET-BERT-A-Contextualized-Datagram-Representation-with-Pre-training-Transformers-for-Encrypted-Traffic-Classification"><a href="#ET-BERT-A-Contextualized-Datagram-Representation-with-Pre-training-Transformers-for-Encrypted-Traffic-Classification" class="headerlink" title="ET-BERT: A Contextualized Datagram Representation with Pre-training Transformers for Encrypted Traffic Classification"></a>ET-BERT: A Contextualized Datagram Representation with Pre-training Transformers for Encrypted Traffic Classification</h1><p>ET-BERT：带预训练变换器的上下文化数据报表示法，用于加密流量分类</p><h2 id="abstract"><a href="#abstract" class="headerlink" title="abstract"></a>abstract</h2><p>  加密流量分类需要具有鉴别力和鲁棒性的 从内容不可见和不平衡的流量数据中获取的流量表示 这对实现网络安全和网络管理具有挑战性，但又是不可或缺的。但对于实现网络安全和网络管理来说，这是不可或缺的。</p><p>  现有解决方案的主要局限在于 高度依赖于深度特征，而深度特征过度依赖于 数据大小，而且很难在未见过的数据中推广。如何利用 如何利用开放域无标记流量数据来学习具有 强泛化能力的表征仍然是一个关键挑战。</p><p>  在本文中 我们提出了一种新的流量表示模型，称为加密的 流量双向编码器表示（ET-BERT (ET-BERT) 的新流量表示模型。该模型可从大规模无标记数据中预先训练深度上下文化数据报级表示。预训练的 模型可在少量特定任务的标记数据上进行微调，并实现了 数据上进行微调，并在五项加密流量分类任务中实现了最先进的性能。在五项加密流量分类任务中取得了一流的性能，极大地推动了 ISCX-VPN-Service达到98.9%（5.2%↑），跨平台（安卓）达到 92.5%（5.4%↑），CSTNET-TLS 1.3 为 97.4%（10.0%↑）。</p><p>  值得注意的是，我们提供了 通过分析密码的随机性，我们解释了经验上强大的预训练模型。代码见：<a href="https://github.com/linwhitehat/ET-BERT%E3%80%82">https://github.com/linwhitehat/ET-BERT。</a></p><h2 id="1-INTRODUCTION"><a href="#1-INTRODUCTION" class="headerlink" title="1 INTRODUCTION"></a>1 INTRODUCTION</h2><p>网络流量分类的目的是识别来自不同应用或网络服务的流量类别。是网络管理和网络安全领域的一项重要技术[4]。是网络管理和网络安全中的一项重要技术[4, 32]。近来，流量加密被广泛用于保护互联网用户的隐私和匿名性。<br>近来，流量加密被广泛用于保护互联网用户的隐私和匿名性。然而，它也给流量分类带来了巨大的挑战 然而，流量加密也给流量分类带来了巨大挑战，因为恶意软件流量和网络罪犯可 网络犯罪分子可以通过隐私增强加密技术（如 Tor 加密技术，如 Tor、VPN 等。传统的 方法是从有效载荷中捕获数据包的模式和关键字，称为深度数据包分类（deep packet classification）。<br>传统方法从有效载荷中捕获数据包中的模式和关键字，称为深度数据包检测 (DPI)，但不适用于加密流量。加密流量。此外，由于加密技术的快速发展 此外，由于加密技术的快速发展，针对特定类型加密流量的流量分类方法无法适用于加密流量。加密流量的流量分类方法不能很好地适应新环境 或未知的加密策略 [27]。<br>因此，如何捕捉 因此，如何捕捉各种加密流量中隐含的稳健模式，并支持准确的通用流量分类至关重要。因此，如何捕捉各种加密流量中隐含的稳健模式，并支持准确、通用的流量分类，对于 实现高度网络安全和有效网络管理至关重要。<br><img src="https://pic-bed-1258913394.cos.ap-nanjing.myqcloud.com/obsidian/20231024201924.png" alt="image.png"></p><p>为解决上述问题，加密流量分类研究随着时间的推移发生了显著发展，如图 1 所示。 早期的研究[35]利用加密流量中的剩余明文（如证书）构建指纹，并进行指纹匹配以进行分类（图 1(a)）。 然而，这些方法不适用于新出现的加密技术<font color="#ff0000">（如 TLS 1.3），因为明文变得更加稀疏或混淆。</font>为此，一些研究 [25, 34] 提取了统计特征，并采用经典的机器学习算法来处理无明文的加密流量（图 1(b)）。这些方法高度依赖专家设计的特征，泛化能力有限。最近，深度学习方法 [19, 20] 自动从原始流量中学习复杂的模式（图 1(c)），并取得了显著的性能提升。但是，这些方法高度依赖标记训练数据的数量和分布，容易造成模型偏差，难以适应新出现的加密。</p><p>近年来，预训练模型在自然语言处理[6]、计算机视觉[8]和其他广泛领域[2, 17]取得了巨大突破。 <font color="#ff0000">基于预训练的方法采用大量无标记数据来学习无偏的数据表示。 </font>通过在有限的标注数据上进行微调，这些数据表示可以很容易地转移到下游任务中。在加密流量分类领域，最新的工作[12]直接应用了预训练技术，并在 VPN 流量分类上取得了明显的改进，<font color="#ff0000">但它缺乏针对流量设计的预训练任务和合理的输入表示来展示预训练模型的效果</font>。****</p><p>在本文中，我们提出了一种用于加密流量分类的新型预训练模型，称为 <strong>“来自变换器的加密流量双向编码器表征（ET-BERT）”<strong>。 <strong>它旨在从大规模无标记加密流量中学习通用流量表示（图 1(d)）。</strong> 我们首先提出一个</strong>原始流量表示模型</strong>，将数据报转换为类似语言的标记，用于预训练。 <strong>每个流量都由一个传输导向结构表示，称为 BURST，作为输入。</strong>  <strong>建议的框架包括两个阶段：预训练和微调。</strong> 具体来说，带有 Transformer 结构的预训练网络通过对大规模无标记加密流量的自监督学习，获得数据报级通用流量表示。在此基础上，我们提出了两个新颖的预训练任务来学习特定流量模式： <strong>掩码 BURST 模型（MBM）</strong> 任务捕捉同一 BURST 中不同数据报字节之间的相关关系，并通过上下文来表示它们； <strong>同源 BURST 预测（SBP）任务</strong> 对前后 BURST 的传输关系进行建模。然后，ET-BERT 结合特定的分类任务，利用少量特定任务的标记数据对参数进行微调。</p><p>本文的主要贡献概述如下： (1) 我们提出了加密流量分类的 <strong>预训练框架</strong> ，利用大规模未标记加密流量来学习通用数据报表示，从而完成一系列加密流量分类任务。 (2)我们新提出了 <strong>两个针对特定流量的自监督预训练任务</strong> ，如屏蔽 BURST 模型和同源 BURST 预测，它们捕获了字节级和 BURST 级上下文关系，从而获得通用数据报表示。(3) ET-BERT具有强大的泛化能力，在通用加密应用分类、加密恶意软件分类、VPN加密流量分类、Tor加密应用分类、TLS 1.3加密应用分类等5项加密流量分类任务上取得了全新的一流性能，分别比现有研究成果高出5.4%、0.2%、5.2%、4.4%、10.0%。同时，我们还对预训练模型的强大性能进行了理论解释和分析。</p><h2 id="2-RELATED-WORK"><a href="#2-RELATED-WORK" class="headerlink" title="2 RELATED WORK"></a>2 RELATED WORK</h2><p>待补充</p><h2 id="3-ET-BERT"><a href="#3-ET-BERT" class="headerlink" title="3 ET-BERT"></a>3 ET-BERT</h2><h3 id="3-1-Model-Architecture"><a href="#3-1-Model-Architecture" class="headerlink" title="3.1 Model Architecture"></a>3.1 Model Architecture</h3><p>在本文中，我们旨在学习通用加密流量表示法，并在不同场景（如应用、加密协议或服务）中对其进行分类。为此，我们提出的预训练策略包含两个主要阶段：利用大规模未标记数据学习通用加密流量表示的预训练，以及针对特定下游任务调整预训练模型的微调。在预训练阶段，给定未标记的流量，预训练模型输出数据报级通用流量表示。在微调阶段，给定特定目标的标记数据包或流量，微调模型会预测其类别。</p><p>加密流量与自然语言和图像有很大不同，它不包含人类可理解的内容和明确的语义单元。为了有效利用预训练技术对加密流量进行分类，我们在 ET-BERT 中主要提出了三个组成部分，如图 2 所示：（1）我们提出 Datagram2Token 方法（第 3.2 节），将加密流量转换为模式保存的 token 单元进行预训练；（2）然后提出两个预训练任务，如 Masked BURST Model 和 Sameorigin BURST Prediction。(3) 为了适应不同的流量分类场景，我们进一步提出了两种微调策略，即针对单个数据包分类的数据包级微调和针对单个流量分类的流量级微调（第 3.4 节）。  </p><p>ET-BERT 的主要网络架构由多层双向变压器模块组成 [36]。每个区块都由多头自注意层组成，这些自注意层捕捉数据报中编码流量单元之间的隐含关系。在本研究中，网络结构由 12 个变换器块组成，每个自注意层有 12 个注意头。每个输入标记 H 的维度设置为 768，输入标记的数量为 512。</p><h3 id="3-2-Datagram2Token-Traffic-Representation"><a href="#3-2-Datagram2Token-Traffic-Representation" class="headerlink" title="3.2 Datagram2Token Traffic Representation"></a>3.2 Datagram2Token Traffic Representation</h3><p>在真实网络环境中，海量流量包含不同类别（如不同的应用、协议或服务）的各种流量，这使得学习某类流量的稳定且具有区分性的表示方法变得十分困难。因此，在对流量进行表示之前，我们首先将具有相同 <font color="#ff0000">IP、端口和协议</font>的流量从跟踪记录中拆分出来。因此，每个拆分出来的流量都来自包含完整流量会话的同一流量类别。为了进一步将流量转化为类似于自然语言的单词标记，我们提出了一种 Datagram2Token 该模块由三个进程组成：（1）BURST 生成器<strong>在一个会话流中继续提取服务器到客户端或客户端到服务器的数据包</strong>，命名为 BURST [26, 31]，以表示会话的部分完整信息。(2) 然后，<strong>BURST2Token 流程通过双元模型将每个 BURST 中的数据报转换为标记嵌入</strong>。同时，该流程还能将一个 BURST 分割成两个片段，为预训练任务做好准备。(3) 最后，<strong>Token2Emebdding 将每个 token 的 token embedding、position embedding 和 segmentation embedding 连接起来，作为预训练的输入表示。</strong></p><h4 id="3-2-1-BURST-Generator"><a href="#3-2-1-BURST-Generator" class="headerlink" title="3.2.1 BURST Generator."></a>3.2.1 BURST Generator.</h4><p>BURST 被定义为一组时间相邻的网络数据包，这些数据包源自单个会话流中的请求或响应。一连串的 BURST 从应用层的角度描述了网络流传输的模式。在应用层，由于网络服务的个性化，网页之间的文档对象模型（DOM）树变得多种多样。由于客户端渲染过程会将网页数据划分为不同的对象（如文本和图像），因此 DOM 结构会生成语义感知片段，并潜移默化地影响客户端的资源请求。每个生成的片段形成一个网络 BURST，其中包含 DOM 结构中特定类型内容的完整部分。我们提取 BURST 作为预训练模型的输入。</p><p>对于 BURST，我们关注的是数据包的来源和目的地。给定数据包捕获文件中的跟踪作为序列 $$Trace &#x3D; {flow_i, i \in \mathbb{N}^+}$$, 其中<br>$$flow &#x3D; {p_j,j\in \mathbb{N}^+}$$<br>是由源到目的数据包 p 组成的会话流，由五元组<br>$$(IPsrc:PORTsrc, IPdst:PORTdst, Protocol)$$<br>标识。BURST 的定义如下<br>$$ BURST &#x3D; \left{\begin{aligned}B^{src} &#x3D; {p_m^{src}， m\in N^+}\B^{dst} &#x3D; {p_n^{dst}， n\in N^+}\end{aligned}\right.$$<br>其中，m、n 分别表示<em>源到目的地</em>和<em>目的地到源</em>的最大单向数据包数量  </p><h4 id="3-2-2-BURST2Token"><a href="#3-2-2-BURST2Token" class="headerlink" title="3.2.2 BURST2Token"></a>3.2.2 BURST2Token</h4><p>为了将 BURST 表示法转换为用于预训练的标记表示法，我们将十六进制 BURST 分解为一系列单元。  </p><p>为此，我们使用<strong>双元编码</strong>来对十六进制序列进行编码，其中<strong>每个单元由两个相邻的字节</strong>组成。然后，我们使用字节对编码（Byte-Pair Encoding）来表示标记，其中每个标记单元的范围为 0 到 65535，字典大小 |V | 最大表示为 65536。此外，我们还为训练任务添加了特殊标记 [CLS]、[SEP]、[PAD] 和 [MASK]。每个序列的第一个标记总是 [CLS]，与该标记相关的最终隐藏层状态用于表示分类任务的完整序列。标记 [PAD] 是一个填充符号，用于满足最小长度要求。一个 BURST 的子 BURST 对将用 [SEP] 分隔。标记 [MASK] 出现在预训练期间，用于学习流量的上下文。</p><p>如图 2 所示，在 SBP 任务中，我们将一个 BURST 平均分成两个子 BURST。我们用特殊符号 [SEP] 和表示属于 A 段还是 B 段的段嵌入来区分子 BURST。</p><p><img src="https://pic-bed-1258913394.cos.ap-nanjing.myqcloud.com/obsidian/20231024213042.png" alt="image.png"></p><h4 id="3-2-3-Token2Embedding"><a href="#3-2-3-Token2Embedding" class="headerlink" title="3.2.3 Token2Embedding."></a>3.2.3 Token2Embedding.</h4><p>我们用三种嵌入来表示 BURST2Token 中得到的每个标记：标记嵌入、位置嵌入和段嵌入。将上述三种嵌入相加，就能构建出完整的标记表示法。在这项工作中，我们将完整的标记化数据报作为原始输入。第一组嵌入向量是随机初始化的，其中嵌入维度为 D &#x3D; 768。经过 N 次变换器编码后，我们得到最终的标记嵌入。  </p><p><strong>Token Embedding.</strong> 如图 2 所示，从第 3.2.2 节的查找表中学习到的令牌表示称为令牌嵌入 $Etoken$  。输入令牌的最终隐藏向量为 $Etoken \in \mathbb{R}^H$ ，其中嵌入维度 H 设为 768。  </p><p><strong>Position Embedding.</strong> 由于流量数据的传输与顺序密切相关，我们使用位置嵌入来确保模型通过相对位置来学习关注标记的时间关系。我们为每个输入标记分配一个 H 维向量，用于表示其在序列中的位置信息。  我们将位置嵌入表示为 $Epos \in \mathbb{R}^H$，其中嵌入维度 H 设为 768。</p><p><strong>Segment Embedding.</strong><br>如第 3.2.2 节所述，sub-BURST 的段嵌入表示为 $Eseg \in \mathbb{R}^H$，其中嵌入维度 H 设为 768。在微调阶段，我们将一个数据包或一个数据流表示为一个分段来完成分类任务。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/10/25/hello-world/"/>
    <url>/2023/10/25/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
